######################################################################################################################
Hash Table INIT

GHashTable* hash = g_hash_table_new(g_str_hash, g_str_equal); //Create hash table

######################################################################################################################
HASH TABLE PRINT

g_hash_table_foreach( hash, (GHFunc)print_hash_iter, "USER_DATA %s : %d\n");       //print hash

void print_hash_iter(gpointer key, gpointer value, gpointer user_data)             //Print hash_iterator 
{ 
printf(user_data, key, *(gint*)value);                                            //Print all the (key , value) pairs
}

####################################################################################################################
HASH TABLE FREE

g_hash_table_foreach( hash, (GHFunc)delete_iter, NULL);                             //call to deallocate hash table
void delete_iter(gpointer key, gpointer value, gpointer user_data)                  //Detele Iterator
{
  free(value);                                                                      //FREE  value in hash table.
  free(key) ;                                                                       //FREE key in hash table
}
g_hash_table_destroy( hash );                                                       //destroy hash table

###################################################################################################################
HASH TABLE INSERT

g_hash_table_insert( hash, key, value);                       //If the key already exists in the GHashTable its
                                                              //current value is replaced with the new value.
                                                              //Return type : void
                                                              //key : gpointer value :gpointer
                                                              
##################################################################################################################
HASH TABLE LOOKUP

TYPE_CAST(gpointer) = g_hash_table_lookup( hash, key );       //Looks up a key in a GHashTable. 
//IF_KEY_NOT_FOUND_CHECK_FOR_NULL                             //Note that this function cannot distinguish between a 
                                                              //key that is not present and one which is present and has
                                                              //the value NULL.










